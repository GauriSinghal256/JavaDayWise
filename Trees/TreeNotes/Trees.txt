        O              ← level 0 (Root)
       / \
      O   O           ← level 1
         / \
        O   O         ← level 2
       / \
      O   O           ← level 3 (leaves)

      Let’s label the nodes just for clarity:

        A
       / \
      B   C
         / \
        D   E
       / \
      F   G

🔍 Step-by-Step: Height of Node F (assuming it represents 2)
Node F is a leaf → has no children
⇒ Height = 0

🧮 Recap of Heights for Understanding:
Node	      Children	       Height
F, G	     None (leaves)	     0
D	            F, G	         max(0, 0) + 1 = 1
C	            D, E	         max(1, 0) + 1 = 2
A	            B, C	         max(0, 2) + 1 = 3

So, height of node with value 2 (i.e., node F) = 0

📘 What is a Balanced Binary Tree?
A Balanced Binary Tree is a binary tree where the height difference (also known as the balance factor) between the left and right subtree of every node is at most 1.

In other words:

For every node:
| height(left subtree) - height(right subtree) | <= 1

❌ What is a Not Balanced (Unbalanced) Tree?
A binary tree is not balanced (unbalanced) when any node in the tree has a height difference greater than 1 between its left and right subtrees.

Case 1: Root has only one left child

    1
   /
  2
Height of left subtree = 1

Height of right subtree = 0

Difference = |1 - 0| = 1 ✅ Balanced

example 2
      1
     / 
    2   
     \
      3

Height of left subtree = 2

Height of right subtree = 0

|2 - 0| = 2 ❌ Not Balanced


🧠 Rule Recap
At each node:

if |height(left) - height(right)| <= 1
    → it's balanced
else
    → not balanced