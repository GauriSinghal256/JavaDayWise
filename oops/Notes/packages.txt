Packages are containers for classes. They are used to keep the class name space compartmentalized.
For example, a package allows you to create a class named List, which you can store in your own package without
concern that it will collide with some other class named List stored elsewhere. Packages are stored in a hierarchical
manner and are explicitly imported into new class definitions.

üìò Definition:
A package in Java is a group of related classes, interfaces, and sub-packages.
It helps in avoiding name conflicts, reusing code, and organizing projects.

The package is both a naming and a visibility control mechanism.
‚úÖ 1. Naming Mechanism
Packages help uniquely name classes to avoid naming conflicts.

package com.company1;
public class Employee { }

package com.company2;
public class Employee { }

//we can use them like 
com.company1.Employee e1 = new com.company1.Employee();
com.company2.Employee e2 = new com.company2.Employee();

‚úÖ 2. Visibility Control Mechanism
Java uses packages to restrict or allow access to classes and members (fields, methods) using access modifiers:
Modifier	Accessible   Within Same Class	Same Package	Subclass (diff package)	Everywhere
private	       ‚úÖ Yes	‚ùå No	          ‚ùå No	           ‚ùå No
(default)	   ‚úÖ Yes	‚úÖ Yes	          ‚ùå No	           ‚ùå No
protected	   ‚úÖ Yes	‚úÖ Yes	          ‚úÖ Yes	           ‚ùå No
public	       ‚úÖ Yes	‚úÖ Yes	          ‚úÖ Yes	           ‚úÖ Yes

If no modifier is given (called default or package-private), the member/class is only accessible within the same package.
This means packages allow group-level access control
Two classes with the same name can exist in different packages without any issues.

The following statement creates a package called MyPackage: package MyPackage;

Java uses file system directories to store packages. For example, the .class files for any classes you declare to be
part of MyPackage must be stored in a directory called MyPackage. Remember that case is significant, and the directory
name must match the package name exactly.

A package hierarchy must be reflected in the file system of your Java development system.
For example, a package declared as

    package java.awt.image;

needs to be stored in java\awt\image in a Windows environment. Be sure to choose your package names carefully.
You cannot rename a package without renaming the directory in which the classes are stored.

How does the Java run-time system know where to look for packages that you create? The answer has three parts.
- First, by default, the Java run-time system uses the current working directory as its starting point.
Thus, if your package is in a subdirectory of the current directory, it will be found.
- Second, you can specify a directory path or paths by setting the CLASSPATH environmental variable.
- Third, you can use the -classpath option with java and javac to specify the path to your classes.

When a package is imported, only those items within the package declared as public will be available to non-subclasses
in the importing code.